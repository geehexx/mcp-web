---
title: "Git Commit Workflow"
description: "Git commit workflow with validation and review"
type: "command"
status: "active"

# Windsurf workflow metadata
windsurf:
  type: "workflow"
  category: "Validation"
  complexity: "moderate"
  dependencies: ["validate"]

# Cursor command metadata
cursor:
  pass_through: true

tags: ["git", "commit", "validation", "conventional-commits"]

---
related: []

# Git Commit Workflow

**Purpose:** Stage and commit with validation and conventional format.

**Chain:** `/commit` → `/validate` → `/bump-version` (conditional)

## Process

### 1. Auto-Fixes

Commit separately: `style(scope): apply [tool] auto-fixes`

### 2. Validate (MANDATORY)

Call `/validate` - if fails, STOP, fix, re-validate

### 3. Review & Stage

```bash
git status --short && git diff
git add <files> && git diff --staged
```

### 4. Commit

Use conventional commit format: `type(scope): description`

**Types:** feat, fix, docs, test, refactor, security, perf, chore, style

**Examples:**
```bash
feat(cli): add test-robots command
fix(fetcher): handle Playwright timeout
docs(api): update endpoint documentation
test(unit): add coverage for auth module
refactor(parser): simplify URL validation logic
security(auth): implement rate limiting
perf(cache): optimize cache lookup performance
chore(deps): update dependencies
style(lint): apply ruff formatting
```

### 5. Version Bump (Conditional)

**Call** `/bump-version` if:
- Major feature added
- Breaking changes
- User-visible changes

## Context Loading

Load these rules if you determine you need them based on their descriptions:

- **Documentation Standards**: `/rules/03_documentation.mdc` - Apply when updating documentation
- **Security Practices**: `/rules/06_security_practices.mdc` - Apply when dealing with security-sensitive commits

## Workflow References

When this commit workflow is called:

1. **Load**: `/commands/commit.md`
2. **Execute**: Follow the commit process stages
3. **Validate**: Run validation checks
4. **Commit**: Create conventional commit

## Anti-Patterns

❌ **Don't:**
- Skip validation
- Use non-conventional commit messages
- Commit without reviewing changes
- Mix unrelated changes

✅ **Do:**
- Always validate before committing
- Use conventional commit format
- Review all changes
- Commit related changes together

## Success Metrics

| Metric | Target | Status |
|--------|--------|--------|
| Validation passes | 100% | ✅ |
| Conventional format | 100% | ✅ |
| Review completeness | 100% | ✅ |
| Commit frequency | Appropriate | ✅ |

## Integration

**Called By:**
- `/work` - Main orchestration workflow
- `/implement` - After implementation
- User - Direct invocation for commits

**Calls:**
- `/validate` - Validate changes
- `/bump-version` - Bump version if needed

**Exit:**

```markdown
✅ **Completed /commit:** Git commit workflow finished
```

## Command Metadata

**File:** `commit.yaml`
**Type:** Command/Workflow
**Complexity:** Moderate
**Estimated Tokens:** ~1,200
**Last Updated:** 2025-10-22
**Status:** Active

**Topics Covered:**
- Git operations
- Validation processes
- Conventional commits
- Version management

**Dependencies:**
- /validate - Validate changes before commit
