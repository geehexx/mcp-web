name: Markdown Quality

on:
  push:
    branches: [main, develop]
    paths:
      - '**.md'
      - '.markdownlint-cli2.jsonc'
      - '.markdownlint.json'
      - '.github/workflows/markdown-quality.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - '**.md'
      - '.markdownlint-cli2.jsonc'
      - '.markdownlint.json'
      - '.github/workflows/markdown-quality.yml'

jobs:
  lint-markdown:
    name: Lint Markdown Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci

      - name: Run markdownlint-cli2
        run: |
          npx markdownlint-cli2 "**/*.md"
        continue-on-error: false

      - name: Upload lint results (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: markdown-lint-results
          path: /tmp/mcp-web-markdownlint.json
          if-no-files-found: ignore

  test-markdown-quality:
    name: Test Markdown Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install Python dependencies
        run: |
          uv sync

      - name: Run markdown quality tests
        run: |
          uv run pytest tests/test_markdown_quality.py -v --tb=short

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: markdown-test-results
          path: |
            .pytest_cache/
            htmlcov/
          if-no-files-found: ignore

  # Optional: Prose quality with Vale (if configured)
  prose-quality:
    name: Check Prose Quality (Vale)
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail builds on prose issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Vale
        uses: errata-ai/vale-action@reviewdog
        with:
          files: '["docs", "README.md", "CONTRIBUTING.md"]'
          version: 3.7.1
          # Note: Requires .vale.ini configuration file
        continue-on-error: true

      # Alternative manual Vale setup if vale-action doesn't work
      - name: Install Vale (fallback)
        if: failure()
        run: |
          wget https://github.com/errata-ai/vale/releases/download/v3.7.1/vale_3.7.1_Linux_64-bit.tar.gz
          tar -xvzf vale_3.7.1_Linux_64-bit.tar.gz
          sudo mv vale /usr/local/bin/

      - name: Run Vale (fallback)
        if: failure()
        run: |
          vale --config=.vale.ini docs/ README.md || true
        continue-on-error: true

  summary:
    name: Quality Check Summary
    runs-on: ubuntu-latest
    needs: [lint-markdown, test-markdown-quality]
    if: always()

    steps:
      - name: Check all jobs passed
        run: |
          if [ "${{ needs.lint-markdown.result }}" != "success" ] || \
             [ "${{ needs.test-markdown-quality.result }}" != "success" ]; then
            echo "❌ Markdown quality checks failed"
            exit 1
          else
            echo "✅ All markdown quality checks passed"
          fi
