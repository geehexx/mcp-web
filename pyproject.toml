[project]
name = "mcp-web"
version = "0.2.0"
description = "MCP server for web operations including intelligent URL summarization"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "mcp-web contributors"}
]
keywords = ["mcp", "web", "summarization", "llm", "content-extraction"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # MCP Protocol
    "mcp>=1.0.0",
    # HTTP & Web Fetching
    "httpx[http2]>=0.27.0",
    "playwright>=1.45.0",
    # Content Extraction
    "trafilatura>=1.12.0",
    "pypdf>=4.0.0",
    "pdfplumber>=0.11.0",
    # Text Processing & Chunking
    "tiktoken>=0.7.0",
    "nltk>=3.8.0",
    "scikit-learn>=1.5.0",  # TF-IDF for text similarity
    # LLM Integration
    "openai>=1.40.0",
    "anthropic>=0.34.0", # Optional: Claude support
    "instructor>=1.0.0", # Structured LLM extraction
    # Caching & Storage
    "diskcache>=5.6.0",
    # Utilities
    "pydantic>=2.8.0",
    "pydantic-settings>=2.4.0",
    "python-dateutil>=2.9.0",
    "aiofiles>=24.1.0",
    "click>=8.1.0",
    "jinja2>=3.1.0",
    "python-frontmatter>=1.0.0",
    "pyyaml>=6.0.0",
    # Logging & Monitoring
    "structlog>=24.4.0",
    "freezegun>=1.5.5",
    "pytest-sugar>=1.1.1",
    "pytest-split>=0.10.0",
    "pytest-repeat>=0.9.4",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.3.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.6.0",  # Parallel testing
    "pytest-watch>=4.2.0",  # Watch mode for tests
    "pytest-httpx>=0.32.0", # Mocking for httpx
    "psutil>=5.9.0", # For memory usage testing

    # LLM testing & evaluation
    "deepeval>=1.2.0",  # LLM evaluation framework
    "responses>=0.25.0",  # HTTP request mocking

    # Code quality
    "ruff>=0.6.0",
    "mypy>=1.11.0",

    # Security analysis
    "bandit[toml]>=1.7.9",
    "safety>=3.2.0",  # Dependency vulnerability scanner

    # Type stubs
    "types-aiofiles>=24.1.0",
    "types-python-dateutil>=2.9.0",
]

[project.urls]
Homepage = "https://github.com/geehexx/mcp-web"
Repository = "https://github.com/geehexx/mcp-web"
Documentation = "https://github.com/geehexx/mcp-web/docs"
Issues = "https://github.com/geehexx/mcp-web/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_web"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=mcp_web",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/mcp_web"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.ruff]
target-version = "py310"
line-length = 100
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without explicit strict parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["ARG", "SIM"]  # Allow more relaxed rules in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "trafilatura.*",
    "diskcache.*",
    "playwright.*",
    "mcp.*",
    "click.*",
    "deepeval.*",
]
ignore_missing_imports = true
