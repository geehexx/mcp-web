[pytest]
# Pytest configuration for mcp-web

# Test discovery
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Test markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (multi-component)
    security: Security tests (OWASP LLM Top 10)
    golden: Golden/regression tests (may require LLM for summarization)
    live: Live tests requiring network/API
    requires_api: Tests requiring API key
    requires_network: Tests requiring network access
    slow: Tests that take > 1 second
    benchmark: Performance benchmarks tests (separate from regular tests)
    io_bound: IO-bound tests (suitable for high concurrency)

# Asyncio mode
asyncio_mode = auto

# pytest-xdist parallelization settings
# -n auto: Use all available CPU cores
# --dist loadscope: Group tests by module/class for better fixture reuse
# --maxprocesses: Limit to avoid resource exhaustion (optional)

# Default options for all test runs
addopts =
    --strict-markers
    --tb=short
    -v
    --benchmark-disable
    --durations=10
    --store-durations

# Coverage options: Add --cov=src --cov-report=term-missing:skip-covered when running with coverage
# Benchmark is disabled by default to allow parallel execution with xdist

# Timeout
timeout = 300
timeout_method = thread

# Warnings
filterwarnings =
    error
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Log configuration
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Parallel execution with pytest-xdist
# Best practices (October 2025):
# - Use -n auto for CPU-bound tests (pure Python logic)
# - Use -n 16 or higher for IO-bound tests (external APIs, network calls)
# - Set PYTEST_XDIST_AUTO_NUM_WORKERS environment variable to override
# Example: PYTEST_XDIST_AUTO_NUM_WORKERS=16 task test:parallel
#
# Distribution strategies:
# --dist load (default): Distribute to any available worker
# --dist loadscope: Group by module/class for fixture reuse
# --dist loadfile: Group by file
# --dist worksteal: Reassign from slower to faster workers
#
# Usage:
#   task test:parallel              # -n auto (CPU count)
#   task test:integration:parallel  # -n auto for integration tests
#   task test:coverage:parallel     # -n auto with coverage

[tool:pytest]
# Additional pytest-cov configuration
